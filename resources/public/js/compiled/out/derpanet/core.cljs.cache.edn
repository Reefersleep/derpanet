;; Analyzed by ClojureScript 0.0-3211
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name derpanet.core, :imports nil, :requires {cljs.core.async cljs.core.async, fw figwheel.client, figwheel.client figwheel.client, reagent.core reagent.core, r reagent.core}, :uses {close! cljs.core.async, chan cljs.core.async}, :defs {timeout {:protocol-inline nil, :meta {:arglists (quote ([ms])), :end-column 14, :end-line 23, :column 7, :line 23, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/timeout, :variadic false, :file "src/derpanet/core.cljs", :end-column 14, :method-params ([ms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ms])), :test true}, looping-backward? {:protocol-inline nil, :meta {:arglists (quote ([interpreter-state])), :end-column 24, :end-line 43, :column 7, :line 43, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/looping-backward?, :variadic false, :file "src/derpanet/core.cljs", :end-column 24, :method-params ([interpreter-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([interpreter-state])), :test true}, number-box {:protocol-inline nil, :meta {:arglists (quote ([number text-color box-size])), :end-column 17, :end-line 9, :column 7, :line 9, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/number-box, :variadic false, :file "src/derpanet/core.cljs", :end-column 17, :method-params ([number text-color box-size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 3, :fn-var true, :arglists (quote ([number text-color box-size])), :test true}, step {:protocol-inline nil, :meta {:arglists (quote ([interpreter-state])), :end-column 11, :end-line 46, :column 7, :line 46, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/step, :variadic false, :file "src/derpanet/core.cljs", :end-column 11, :method-params ([interpreter-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([interpreter-state])), :test true}, blinker-button {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 21, :end-line 245, :column 7, :line 245, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/blinker-button, :variadic false, :file "src/derpanet/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 245, :end-line 245, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, interpret {:protocol-inline nil, :meta {:arglists (quote ([state])), :end-column 16, :end-line 145, :column 7, :line 145, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/interpret, :variadic false, :file "src/derpanet/core.cljs", :end-column 16, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :test true}, results {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 14, :end-line 279, :column 7, :line 279, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/results, :variadic false, :file "src/derpanet/core.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 279, :end-line 279, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, slider {:protocol-inline nil, :meta {:arglists (quote ([key-in-state range-start range-end label])), :end-column 13, :end-line 234, :column 7, :line 234, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/slider, :variadic false, :file "src/derpanet/core.cljs", :end-column 13, :method-params ([key-in-state range-start range-end label]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 234, :end-line 234, :max-fixed-arity 4, :fn-var true, :arglists (quote ([key-in-state range-start range-end label])), :test true}, printing-example {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 23, :end-line 286, :column 7, :line 286, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/printing-example, :variadic false, :file "src/derpanet/core.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 286, :end-line 286, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, samples {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 14, :end-line 294, :column 7, :line 294, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/samples, :variadic false, :file "src/derpanet/core.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 294, :end-line 294, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, boxes {:protocol-inline nil, :meta {:arglists (quote ([cells cell-pointer])), :end-column 12, :end-line 180, :column 7, :line 180, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/boxes, :variadic false, :file "src/derpanet/core.cljs", :end-column 12, :method-params ([cells cell-pointer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cells cell-pointer])), :test true}, sourcecode-box {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 21, :end-line 261, :column 7, :line 261, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/sourcecode-box, :variadic false, :file "src/derpanet/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 261, :end-line 261, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, project-root {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 19, :end-line 299, :column 7, :line 299, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/project-root, :variadic false, :file "src/derpanet/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 299, :end-line 299, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, display-running-sourcecode {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 33, :end-line 194, :column 7, :line 194, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/display-running-sourcecode, :variadic false, :file "src/derpanet/core.cljs", :end-column 33, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, brainfuck-reference {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 26, :end-line 291, :column 7, :line 291, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/brainfuck-reference, :variadic false, :file "src/derpanet/core.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 291, :end-line 291, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, sourcecode-repeater {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 26, :end-line 272, :column 7, :line 272, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/sourcecode-repeater, :variadic false, :file "src/derpanet/core.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 272, :end-line 272, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, start {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 12, :end-line 323, :column 7, :line 323, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/start, :variadic false, :file "src/derpanet/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 323, :end-line 323, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, evaluate-button {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 22, :end-line 252, :column 7, :line 252, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/evaluate-button, :variadic false, :file "src/derpanet/core.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 252, :end-line 252, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, state {:meta {:end-column 15, :end-line 173, :column 10, :line 173, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :file "src/derpanet/core.cljs", :line 173, :column 1, :end-line 173, :end-column 15, :test true, :name derpanet.core/state}, brackets-balanced? {:protocol-inline nil, :meta {:arglists (quote ([interpreter-state])), :end-column 25, :end-line 40, :column 7, :line 40, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/brackets-balanced?, :variadic false, :file "src/derpanet/core.cljs", :end-column 25, :method-params ([interpreter-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([interpreter-state])), :test true}, initialize-cells {:protocol-inline nil, :meta {:arglists (quote ([number])), :end-column 23, :end-line 29, :column 7, :line 29, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/initialize-cells, :variadic false, :file "src/derpanet/core.cljs", :end-column 23, :method-params ([number]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([number])), :test true}, looping-forward? {:protocol-inline nil, :meta {:arglists (quote ([interpreter-state])), :end-column 23, :end-line 37, :column 7, :line 37, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/looping-forward?, :variadic false, :file "src/derpanet/core.cljs", :end-column 23, :method-params ([interpreter-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([interpreter-state])), :test true}, retrieve-current-symbol {:protocol-inline nil, :meta {:arglists (quote ([interpreter-state])), :end-column 30, :end-line 34, :column 7, :line 34, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/retrieve-current-symbol, :variadic false, :file "src/derpanet/core.cljs", :end-column 30, :method-params ([interpreter-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([interpreter-state])), :test true}, display-editable-textbox {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 31, :end-line 218, :column 7, :line 218, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/display-editable-textbox, :variadic false, :file "src/derpanet/core.cljs", :end-column 31, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 218, :end-line 218, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, on-js-reload {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 19, :end-line 334, :column 7, :line 334, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/on-js-reload, :variadic false, :file "src/derpanet/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 334, :end-line 334, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, initial-interpreter-state {:meta {:end-column 31, :end-line 162, :column 6, :line 162, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :file "src/derpanet/core.cljs", :line 162, :column 1, :end-line 162, :end-column 31, :test true, :name derpanet.core/initial-interpreter-state}, out-of-upper-sourcecode-bounds? {:protocol-inline nil, :meta {:arglists (quote ([interpreter-state])), :end-column 38, :end-line 31, :column 7, :line 31, :file "/Users/Soeren/dev/clojure/projects/derpanet/src/derpanet/core.cljs"}, :name derpanet.core/out-of-upper-sourcecode-bounds?, :variadic false, :file "src/derpanet/core.cljs", :end-column 38, :method-params ([interpreter-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([interpreter-state])), :test true}}, :require-macros {fw figwheel.client, figwheel.client figwheel.client, cljs.core.async.macros cljs.core.async.macros, m cljs.core.async.macros}, :cljs.analyzer/constants {:order [:div :style :border-color :border-style :border-width :min-width :min-height :position :color :top :left :transform :reader-position :src :looping-forward :movement :nested-left-brackets :nested-right-brackets :looping-backward :cell-pointer :cells :terminated-due-to :reached-upper-sourcecode-bounds :moving-forward :printedchars :else :interpreter-state :running :recur :delay :sourcecode :cell-display-width :width :display :justify-content :overflow :span :border :resize :font-size :height :visibility :list-style-type :overflow-y :word-break :word-wrap :background-color :textarea :disabled :value :on-change :font-family :float :text-align :input :type :min :max :p :padding-top :button :on-click :id :margin-left :margin-right :br :__figwheel_counter], :seen #{:border-style :min-width :sourcecode :nested-right-brackets :looping-backward :movement :min :transform :color :text-align :min-height :disabled :printedchars :else :font-size :button :top :float :overflow :nested-left-brackets :margin-left :value :list-style-type :background-color :interpreter-state :word-wrap :width :recur :type :src :resize :on-click :running :style :textarea :div :border-width :looping-forward :padding-top :reader-position :cell-pointer :max :word-break :id :reached-upper-sourcecode-bounds :justify-content :moving-forward :border-color :display :position :br :input :cells :cell-display-width :margin-right :terminated-due-to :on-change :border :overflow-y :p :delay :__figwheel_counter :visibility :font-family :height :left :span}}, :doc nil}